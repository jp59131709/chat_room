<?xml version="1.0" encoding="UTF-8"?>
<configuration debug="false" scan="true" scanPeriod="60 seconds">
    <include resource="org/springframework/boot/logging/logback/base.xml"/>



    <!--属性、構成ログの出力パス -->
    <property name="log_path" value="./logs"/>
    <property name="appName" value="chat-room"></property>
    <!-- プロジェクト名 -->
    <contextName>${appName}</contextName>

    <timestamp key="bySecond" datePattern="yyyy-MM-dd HH:mm:ss" timeReference="contextBirth"/>

    <!-- ConsoleApperderはconsoleから印刷することを意味します -->
    <appender name="Console" class="ch.qos.logback.core.ConsoleAppender">
        <!-- フィルター、appenderは1つで複数 -->
        <!-- 閾値フィルタリングとは、log行動レベルフィルタリングであり、debugおよびdebug以上の情報が印刷される -->
        <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
            <level>debug</level>
            <!--<onMatch>ACCEPT</onMatch>-->
            <!--<onMismatch>DENY</onMismatch>-->
        </filter>
        <encoder charset="UTF-8"> <!-- encoder 文字セットを指定でき、中国語出力に有意義 -->
            <!--<pattern>%d{yyyy-MM-dd HH:mm:ss} %-5level %logger %caller{1} :[%msg]%n</pattern>-->
            <pattern>%blue(%d{yyyy-MM-dd HH:mm:ss}) %yellow(%-5level) %cyan(%logger [%line] :) %green([%msg]%n)</pattern>
        </encoder>
    </appender>

    <!-- FileAppender ファイルに出力 -->
    <!--<appender name="logFiles" class="ch.qos.logback.core.FileAppender">-->
        <!--&lt;!&ndash; ファイルの保存場所 %{xxx} 前に定義した属性ですxxx &ndash;&gt;-->
        <!--<file>${log_path}/${appName}.log</file>-->
        <!--<encoder>-->
            <!--&lt;!&ndash; %dateと%dは同じ意味です %fileが存在するファイル%lineが存在する行 &ndash;&gt;-->
            <!--<pattern>%date %level [%thread] %logger{30} [%file:%line] %msg%n</pattern>-->
        <!--</encoder>-->
    <!--</appender>-->

    <!-- HTML形式に出力されるファイル -->
    <!--<appender name="htmlFiles" class="ch.qos.logback.core.FileAppender">-->
        <!--&lt;!&ndash; フィルタ、このフィルタは行動フィルタであり、デバッグを除くすべての行動情報を直接フィルタリングします &ndash;&gt;-->
        <!--<filter class="ch.qos.logback.classic.filter.LevelFilter">-->
            <!--<level>debug</level>-->
            <!--<onMatch>ACCEPT</onMatch>-->
            <!--<onMismatch>DENY</onMismatch>-->
        <!--</filter>-->
        <!--<encoder class="ch.qos.logback.core.encoder.LayoutWrappingEncoder">-->
            <!--&lt;!&ndash; HTML出力フォーマットは上辺とあまり差がない &ndash;&gt;-->
            <!--<layout class="ch.qos.logback.classic.html.HTMLLayout">-->
                <!--<pattern>%relative%thread%mdc%level%logger%msg</pattern>-->
            <!--</layout>-->
        <!--</encoder>-->
        <!--<file>${log_path}/${appName}.html</file>-->
    <!--</appender>-->

    <!-- ログファイルをスクロールして、これは比較的に常用します -->
    <appender name="rollingFile" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!-- projectがtrueに等しい場合、fileは効果を発揮しません-->
        <!--<project>true</project>-->
        <file>${log_path}/${appName}.log</file>
        <!-- 日別新規ログログ -->
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <!-- daily rollover -->
            <fileNamePattern>${log_path}/%d{yyyy-MM-dd}/${appName}.%d{yyyy-MM-dd}.%i.log</fileNamePattern>
            <!-- 履歴ログを30日間保持 -->
            <maxHistory>30</maxHistory>
            <!-- サイズと時間に基づいて、これはあることができて、ないことができます -->
            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <!-- or whenever the file size reaches 100MB -->
                <!-- ログサイズが10 KBより大きい場合は、新しいログを交換します。ログ名の%iは0から自動的に増加 -->
                <maxFileSize>100MB</maxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy>
        </rollingPolicy>
        <encoder charset="UTF-8">
            <!-- %exとはスローされた例外のことで、fullはすべてを表示し、{}に数字を書き込むと、何行を表示するかを示します -->
            <pattern>%-4date [%thread] %-5level %logger{} [%line]: [%msg]%n%ex{full, DISPLAY_EX_EVAL}</pattern>
        </encoder>
    </appender>

    <!-- ポイントが来て、上はすべてappender出力源です。ここからがlooger -->
    <!-- nameとは、このloggerチューブのどの部分を意味し、次のようなチューブは、com/qgyパッケージのすべてのファイルlevelがどの行動情報レベル以上のものであるかを示しています。しきい値フィルタadditivityのように、イベントをスローするかどうかを示しています。つまり、loggerのnameがlogであれば、この属性がtrueであれば、別のloggerはこのloggerの処理が完了した後も処理を続けます -->
    <!--<logger name="com.qgy" level="DEBUG" additivity="false">-->
    <!--&lt;!&ndash; 出力ソース、つまり上の出力ソースを接続するには、いくつかのappenderを選択することができます &ndash;&gt;-->
    <!--<appender-ref ref="stdout"/>-->
    <!--<appender-ref ref="logFiles"/>-->
    <!--&lt;!&ndash;<appender-ref ref="htmlFiels"/>&ndash;&gt;-->
    <!--</logger>-->

    <!-- このloggerはクラスに詳しくなっています -->
    <logger name="com.chaofan.websocket" level="debug" additivity="false">
        <appender-ref ref="Console"/>
        <!--<appender-ref ref="logFiles"/>-->
        <!--<appender-ref ref="htmlFiles"/>-->
        <appender-ref ref="rollingFile"/>
    </logger>

    <!-- 以下に、画面をこすらないようにするためのサードパーティ製パッケージのログフィルタレベルを設定します。 -->

    <!--<logger name="org.springframework" level="ERROR" />-->
    <!--<logger name="com.opensymphony" level="WARN" />-->
    <!--<logger name="org.apache" level="WARN" />-->
    <!--<logger name="org.quartz" level="WARN" />-->
    <!--<logger name="net.bull.javamelody" level="WARN" />-->
    <!--<logger name="org.apache.ibatis" level="WARN" />-->
    <!--<logger name="ACP_SDK_LOG" level="WARN" />-->
    <!--<logger name="SDK_MSG_LOG" level="WARN" />-->
    <!--<logger name="SDK_ERR_LOG" level="WARN" />-->
</configuration>